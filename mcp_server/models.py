# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:59:12+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class MountPermissions(Enum):
    MOUNT_PERMISSIONS_UNSPECIFIED = 'MOUNT_PERMISSIONS_UNSPECIFIED'
    READ = 'READ'
    READ_WRITE = 'READ_WRITE'


class AllowedClient(BaseModel):
    allowDev: Optional[bool] = Field(
        None,
        description='Allow dev flag. Which controls whether to allow creation of devices.',
    )
    allowSuid: Optional[bool] = Field(None, description='Allow the setuid flag.')
    allowedClientsCidr: Optional[str] = Field(
        None, description='The subnet of IP addresses permitted to access the share.'
    )
    mountPermissions: Optional[MountPermissions] = Field(
        None, description='Mount permissions.'
    )
    network: Optional[str] = Field(
        None, description='The network the access point sits on.'
    )
    nfsPath: Optional[str] = Field(
        None,
        description='Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001"',
    )
    noRootSquash: Optional[bool] = Field(
        None,
        description='Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.',
    )
    shareIp: Optional[str] = Field(
        None,
        description="Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.",
    )


class DetachLunRequest(BaseModel):
    lun: Optional[str] = Field(None, description='Required. Name of the Lun to detach.')
    skipReboot: Optional[bool] = Field(
        None, description='If true, performs lun unmapping without instance reboot.'
    )


class DisableInteractiveSerialConsoleRequest(BaseModel):
    pass


class Empty(BaseModel):
    pass


class EnableInteractiveSerialConsoleRequest(BaseModel):
    pass


class EvictLunRequest(BaseModel):
    pass


class EvictVolumeRequest(BaseModel):
    pass


class Type(Enum):
    INTERFACE_TYPE_UNSPECIFIED = 'INTERFACE_TYPE_UNSPECIFIED'
    BOND = 'BOND'
    NIC = 'NIC'


class GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Interface name. This is not a globally unique identifier. Name is unique only inside the ServerNetworkTemplate. This is of syntax or and forms part of the network template name.',
    )
    required: Optional[bool] = Field(
        None, description='If true, interface must have network connected.'
    )
    type: Optional[Type] = Field(None, description='Interface type.')


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PROVISIONING = 'PROVISIONING'
    RUNNING = 'RUNNING'
    DELETED = 'DELETED'
    UPDATING = 'UPDATING'
    STARTING = 'STARTING'
    STOPPING = 'STOPPING'
    SHUTDOWN = 'SHUTDOWN'


class WorkloadProfile(Enum):
    WORKLOAD_PROFILE_UNSPECIFIED = 'WORKLOAD_PROFILE_UNSPECIFIED'
    WORKLOAD_PROFILE_GENERIC = 'WORKLOAD_PROFILE_GENERIC'
    WORKLOAD_PROFILE_HANA = 'WORKLOAD_PROFILE_HANA'


class NetworkConfig(Enum):
    NETWORKCONFIG_UNSPECIFIED = 'NETWORKCONFIG_UNSPECIFIED'
    SINGLE_VLAN = 'SINGLE_VLAN'
    MULTI_VLAN = 'MULTI_VLAN'


class InstanceQuota(BaseModel):
    availableMachineCount: Optional[int] = Field(
        None,
        description='Number of machines than can be created for the given location and instance_type.',
    )
    gcpService: Optional[str] = Field(
        None, description='The gcp service of the provisioning quota.'
    )
    instanceType: Optional[str] = Field(
        None, description='Instance type. Deprecated: use gcp_service.'
    )
    location: Optional[str] = Field(
        None, description='Location where the quota applies.'
    )
    name: Optional[str] = Field(
        None, description='Output only. The name of the instance quota.'
    )


class IntakeVlanAttachment(BaseModel):
    id: Optional[str] = Field(None, description='Identifier of the VLAN attachment.')
    pairingKey: Optional[str] = Field(None, description='Attachment pairing key.')


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class NetworkType(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CLIENT = 'CLIENT'
    PRIVATE = 'PRIVATE'


class LogicalNetworkInterface(BaseModel):
    defaultGateway: Optional[bool] = Field(
        None,
        description='Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.',
    )
    id: Optional[str] = Field(
        None, description='An identifier for the `Network`, generated by the backend.'
    )
    ipAddress: Optional[str] = Field(None, description='IP address in the network')
    network: Optional[str] = Field(None, description='Name of the network')
    networkType: Optional[NetworkType] = Field(None, description='Type of network.')


class MultiprotocolType(Enum):
    MULTIPROTOCOL_TYPE_UNSPECIFIED = 'MULTIPROTOCOL_TYPE_UNSPECIFIED'
    LINUX = 'LINUX'


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    READY = 'READY'
    DELETING = 'DELETING'
    COOL_OFF = 'COOL_OFF'


class StorageType(Enum):
    STORAGE_TYPE_UNSPECIFIED = 'STORAGE_TYPE_UNSPECIFIED'
    SSD = 'SSD'
    HDD = 'HDD'


class Lun(BaseModel):
    bootLun: Optional[bool] = Field(
        None, description='Display if this LUN is a boot LUN.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.',
    )
    id: Optional[str] = Field(
        None, description='An identifier for the LUN, generated by the backend.'
    )
    instances: Optional[List[str]] = Field(
        None, description='Output only. Instances this Lun is attached to.'
    )
    multiprotocolType: Optional[MultiprotocolType] = Field(
        None,
        description='The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.',
    )
    name: Optional[str] = Field(None, description='Output only. The name of the LUN.')
    shareable: Optional[bool] = Field(
        None,
        description='Display if this LUN can be shared between multiple physical servers.',
    )
    sizeGb: Optional[str] = Field(
        None, description='The size of this LUN, in gigabytes.'
    )
    state: Optional[State1] = Field(
        None, description='The state of this storage volume.'
    )
    storageType: Optional[StorageType] = Field(
        None, description='The storage type for this LUN.'
    )
    storageVolume: Optional[str] = Field(
        None, description='Display the storage volume for this LUN.'
    )
    wwid: Optional[str] = Field(None, description='The WWID for this LUN.')


class LunRange(BaseModel):
    quantity: Optional[int] = Field(None, description='Number of LUNs to create.')
    sizeGb: Optional[int] = Field(
        None, description='The requested size of each LUN, in GB.'
    )


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PROVISIONING = 'PROVISIONING'
    PROVISIONED = 'PROVISIONED'
    DEPROVISIONING = 'DEPROVISIONING'
    UPDATING = 'UPDATING'


class Type1(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CLIENT = 'CLIENT'
    PRIVATE = 'PRIVATE'


class NetworkAddress(BaseModel):
    address: Optional[str] = Field(
        None, description='IPv4 address to be assigned to the server.'
    )
    existingNetworkId: Optional[str] = Field(
        None, description='Name of the existing network to use.'
    )
    networkId: Optional[str] = Field(
        None,
        description='Id of the network to use, within the same ProvisioningConfig request.',
    )


class NetworkAddressReservation(BaseModel):
    endAddress: Optional[str] = Field(
        None,
        description='The last address of this reservation block, inclusive. I.e., for cases when reservations are only single addresses, end_address and start_address will be the same. Must be specified as a single IPv4 address, e.g. 10.1.2.2.',
    )
    note: Optional[str] = Field(
        None,
        description='A note about this reservation, intended for human consumption.',
    )
    startAddress: Optional[str] = Field(
        None,
        description='The first address of this reservation block. Must be specified as a single IPv4 address, e.g. 10.1.2.2.',
    )


class Bandwidth(Enum):
    BANDWIDTH_UNSPECIFIED = 'BANDWIDTH_UNSPECIFIED'
    BW_1_GBPS = 'BW_1_GBPS'
    BW_2_GBPS = 'BW_2_GBPS'
    BW_5_GBPS = 'BW_5_GBPS'
    BW_10_GBPS = 'BW_10_GBPS'


class ServiceCidr(Enum):
    SERVICE_CIDR_UNSPECIFIED = 'SERVICE_CIDR_UNSPECIFIED'
    DISABLED = 'DISABLED'
    HIGH_26 = 'HIGH_26'
    HIGH_27 = 'HIGH_27'
    HIGH_28 = 'HIGH_28'


class NetworkConfig1(BaseModel):
    bandwidth: Optional[Bandwidth] = Field(
        None, description='Interconnect bandwidth. Set only when type is CLIENT.'
    )
    cidr: Optional[str] = Field(None, description='CIDR range of the network.')
    gcpService: Optional[str] = Field(
        None,
        description='The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.',
    )
    id: Optional[str] = Field(
        None,
        description='A transient unique identifier to identify a volume within an ProvisioningConfig request.',
    )
    jumboFramesEnabled: Optional[bool] = Field(
        None, description='The JumboFramesEnabled option for customer to set.'
    )
    name: Optional[str] = Field(
        None, description='Output only. The name of the network config.'
    )
    serviceCidr: Optional[ServiceCidr] = Field(
        None, description='Service CIDR, if any.'
    )
    type: Optional[Type1] = Field(
        None, description='The type of this network, either Client or Private.'
    )
    userNote: Optional[str] = Field(
        None,
        description='User note field, it can be used by customers to add additional information for the BMS Ops team .',
    )
    vlanAttachments: Optional[List[IntakeVlanAttachment]] = Field(
        None,
        description='List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).',
    )
    vlanSameProject: Optional[bool] = Field(
        None,
        description='Whether the VLAN attachment pair is located in the same project.',
    )


class NetworkMountPoint(BaseModel):
    defaultGateway: Optional[bool] = Field(
        None, description='Network should be a default gateway.'
    )
    instance: Optional[str] = Field(None, description='Instance to attach network to.')
    ipAddress: Optional[str] = Field(None, description='Ip address of the server.')
    logicalInterface: Optional[str] = Field(
        None, description='Logical interface to detach from.'
    )


class Permissions(Enum):
    PERMISSIONS_UNSPECIFIED = 'PERMISSIONS_UNSPECIFIED'
    READ_ONLY = 'READ_ONLY'
    READ_WRITE = 'READ_WRITE'


class NfsExport(BaseModel):
    allowDev: Optional[bool] = Field(
        None, description='Allow dev flag in NfsShare AllowedClientsRequest.'
    )
    allowSuid: Optional[bool] = Field(None, description='Allow the setuid flag.')
    cidr: Optional[str] = Field(None, description='A CIDR range.')
    machineId: Optional[str] = Field(
        None,
        description='Either a single machine, identified by an ID, or a comma-separated list of machine IDs.',
    )
    networkId: Optional[str] = Field(
        None, description='Network to use to publish the export.'
    )
    noRootSquash: Optional[bool] = Field(
        None,
        description='Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.',
    )
    permissions: Optional[Permissions] = Field(None, description='Export permissions.')


class State3(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PROVISIONED = 'PROVISIONED'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'


class NfsShare(BaseModel):
    allowedClients: Optional[List[AllowedClient]] = Field(
        None, description='List of allowed access points.'
    )
    id: Optional[str] = Field(
        None,
        description='Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Labels as key value pairs.'
    )
    name: Optional[str] = Field(
        None, description='Immutable. The name of the NFS share.'
    )
    nfsShareId: Optional[str] = Field(
        None,
        description='Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.',
    )
    requestedSizeGib: Optional[str] = Field(
        None, description='The requested size, in GiB.'
    )
    state: Optional[State3] = Field(
        None, description='Output only. The state of the NFS share.'
    )
    storageType: Optional[StorageType] = Field(
        None, description='Immutable. The storage type of the underlying volume.'
    )
    volume: Optional[str] = Field(
        None,
        description='Output only. The underlying volume of the share. Created automatically during provisioning.',
    )


class State4(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    SUBMITTED = 'SUBMITTED'
    PROVISIONING = 'PROVISIONING'
    PROVISIONED = 'PROVISIONED'
    VALIDATED = 'VALIDATED'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'


class AssetType(Enum):
    ASSET_TYPE_UNSPECIFIED = 'ASSET_TYPE_UNSPECIFIED'
    ASSET_TYPE_SERVER = 'ASSET_TYPE_SERVER'
    ASSET_TYPE_STORAGE = 'ASSET_TYPE_STORAGE'
    ASSET_TYPE_NETWORK = 'ASSET_TYPE_NETWORK'


class ProvisioningQuota(BaseModel):
    assetType: Optional[AssetType] = Field(
        None, description='The asset type of this provisioning quota.'
    )
    availableCount: Optional[int] = Field(
        None, description='The available count of the provisioning quota.'
    )
    gcpService: Optional[str] = Field(
        None, description='The gcp service of the provisioning quota.'
    )
    instanceQuota: Optional[InstanceQuota] = Field(None, description='Instance quota.')
    location: Optional[str] = Field(
        None, description='The specific location of the provisioining quota.'
    )
    name: Optional[str] = Field(
        None, description='Output only. The name of the provisioning quota.'
    )
    networkBandwidth: Optional[str] = Field(None, description='Network bandwidth, Gbps')
    serverCount: Optional[str] = Field(None, description='Server count.')
    storageGib: Optional[str] = Field(None, description='Storage size (GB).')


class QosPolicy(BaseModel):
    bandwidthGbps: Optional[float] = Field(
        None, description='The bandwidth permitted by the QOS policy, in gbps.'
    )


class RenameInstanceRequest(BaseModel):
    newInstanceId: Optional[str] = Field(
        None, description='Required. The new `id` of the instance.'
    )


class RenameNetworkRequest(BaseModel):
    newNetworkId: Optional[str] = Field(
        None, description='Required. The new `id` of the network.'
    )


class RenameNfsShareRequest(BaseModel):
    newNfsshareId: Optional[str] = Field(
        None, description='Required. The new `id` of the nfsshare.'
    )


class RenameVolumeRequest(BaseModel):
    newVolumeId: Optional[str] = Field(
        None, description='Required. The new `id` of the volume.'
    )


class ResetInstanceRequest(BaseModel):
    pass


class ResizeVolumeRequest(BaseModel):
    sizeGib: Optional[str] = Field(None, description='New Volume size, in GiB.')


class RestoreVolumeSnapshotRequest(BaseModel):
    pass


class SSHKey(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Output only. The name of this SSH key. Currently, the only valid value for the location is "global".',
    )
    publicKey: Optional[str] = Field(
        None,
        description='The public SSH key. This must be in OpenSSH .authorized_keys format.',
    )


class ServerNetworkTemplate(BaseModel):
    applicableInstanceTypes: Optional[List[str]] = Field(
        None, description='Instance types this template is applicable to.'
    )
    logicalInterfaces: Optional[
        List[GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface]
    ] = Field(None, description='Logical interfaces.')
    name: Optional[str] = Field(
        None,
        description='Output only. Template\'s unique name. The full resource name follows the pattern: `projects/{project}/locations/{location}/serverNetworkTemplate/{server_network_template}` Generally, the {server_network_template} follows the syntax of "bond" or "nic".',
    )


class SnapshotReservationDetail(BaseModel):
    reservedSpaceGib: Optional[str] = Field(
        None,
        description='The space on this storage volume reserved for snapshots, shown in GiB.',
    )
    reservedSpacePercent: Optional[int] = Field(
        None,
        description='Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.',
    )
    reservedSpaceRemainingGib: Optional[str] = Field(
        None,
        description="The amount, in GiB, of available space in this storage volume's reserved snapshot space.",
    )
    reservedSpaceUsedPercent: Optional[int] = Field(
        None,
        description='The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.',
    )


class StartInstanceRequest(BaseModel):
    pass


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class StopInstanceRequest(BaseModel):
    pass


class State5(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PROVISIONING = 'PROVISIONING'
    PROVISIONED = 'PROVISIONED'


class VlanAttachment(BaseModel):
    id: Optional[str] = Field(
        None, description='Immutable. The identifier of the attachment within vrf.'
    )
    pairingKey: Optional[str] = Field(None, description='Input only. Pairing key.')
    peerIp: Optional[str] = Field(None, description='The peer IP of the attachment.')
    peerVlanId: Optional[str] = Field(
        None, description='The peer vlan ID of the attachment.'
    )
    qosPolicy: Optional[QosPolicy] = Field(
        None,
        description='The QOS policy applied to this VLAN attachment. This value should be preferred to using qos at vrf level.',
    )
    routerIp: Optional[str] = Field(
        None, description='The router IP of the attachment.'
    )


class PerformanceTier(Enum):
    VOLUME_PERFORMANCE_TIER_UNSPECIFIED = 'VOLUME_PERFORMANCE_TIER_UNSPECIFIED'
    VOLUME_PERFORMANCE_TIER_SHARED = 'VOLUME_PERFORMANCE_TIER_SHARED'
    VOLUME_PERFORMANCE_TIER_ASSIGNED = 'VOLUME_PERFORMANCE_TIER_ASSIGNED'
    VOLUME_PERFORMANCE_TIER_HT = 'VOLUME_PERFORMANCE_TIER_HT'


class Protocol(Enum):
    PROTOCOL_UNSPECIFIED = 'PROTOCOL_UNSPECIFIED'
    FIBRE_CHANNEL = 'FIBRE_CHANNEL'
    NFS = 'NFS'


class SnapshotAutoDeleteBehavior(Enum):
    SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED = (
        'SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED'
    )
    DISABLED = 'DISABLED'
    OLDEST_FIRST = 'OLDEST_FIRST'
    NEWEST_FIRST = 'NEWEST_FIRST'


class State6(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    READY = 'READY'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'
    COOL_OFF = 'COOL_OFF'


class WorkloadProfile1(Enum):
    WORKLOAD_PROFILE_UNSPECIFIED = 'WORKLOAD_PROFILE_UNSPECIFIED'
    GENERIC = 'GENERIC'
    HANA = 'HANA'


class Volume(BaseModel):
    attached: Optional[bool] = Field(
        None,
        description='Output only. Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well.',
    )
    autoGrownSizeGib: Optional[str] = Field(
        None,
        description='The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.',
    )
    bootVolume: Optional[bool] = Field(
        None,
        description='Output only. Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.',
    )
    currentSizeGib: Optional[str] = Field(
        None,
        description='The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.',
    )
    emergencySizeGib: Optional[str] = Field(
        None,
        description='Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.',
    )
    expireTime: Optional[str] = Field(
        None,
        description='Output only. Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.',
    )
    id: Optional[str] = Field(
        None, description='An identifier for the `Volume`, generated by the backend.'
    )
    instances: Optional[List[str]] = Field(
        None,
        description='Output only. Instances this Volume is attached to. This field is set only in Get requests.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Labels as key value pairs.'
    )
    maxSizeGib: Optional[str] = Field(
        None,
        description='Maximum size volume can be expanded to in case of evergency, in GiB.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`',
    )
    notes: Optional[str] = Field(
        None,
        description='Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.',
    )
    originallyRequestedSizeGib: Optional[str] = Field(
        None, description='Originally requested size, in GiB.'
    )
    performanceTier: Optional[PerformanceTier] = Field(
        None,
        description='Immutable. Performance tier of the Volume. Default is SHARED.',
    )
    pod: Optional[str] = Field(None, description='Immutable. Pod name.')
    protocol: Optional[Protocol] = Field(
        None, description='Output only. Storage protocol for the Volume.'
    )
    remainingSpaceGib: Optional[str] = Field(
        None,
        description='The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.',
    )
    requestedSizeGib: Optional[str] = Field(
        None, description='The requested size of this storage volume, in GiB.'
    )
    snapshotAutoDeleteBehavior: Optional[SnapshotAutoDeleteBehavior] = Field(
        None, description='The behavior to use when snapshot reserved space is full.'
    )
    snapshotEnabled: Optional[bool] = Field(
        None, description='Whether snapshots are enabled.'
    )
    snapshotReservationDetail: Optional[SnapshotReservationDetail] = Field(
        None,
        description='Details about snapshot space reservation and usage on the storage volume.',
    )
    snapshotSchedulePolicy: Optional[str] = Field(
        None,
        description='The name of the snapshot schedule policy in use for this volume, if any.',
    )
    state: Optional[State6] = Field(
        None, description='The state of this storage volume.'
    )
    storageAggregatePool: Optional[str] = Field(
        None,
        description='Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.',
    )
    storageType: Optional[StorageType] = Field(
        None, description='The storage type for this volume.'
    )
    workloadProfile: Optional[WorkloadProfile1] = Field(
        None, description='The workload profile for the volume.'
    )


class Protocol1(Enum):
    PROTOCOL_UNSPECIFIED = 'PROTOCOL_UNSPECIFIED'
    PROTOCOL_FC = 'PROTOCOL_FC'
    PROTOCOL_NFS = 'PROTOCOL_NFS'


class Type3(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    FLASH = 'FLASH'
    DISK = 'DISK'


class VolumeConfig(BaseModel):
    gcpService: Optional[str] = Field(
        None,
        description='The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.',
    )
    id: Optional[str] = Field(
        None,
        description='A transient unique identifier to identify a volume within an ProvisioningConfig request.',
    )
    lunRanges: Optional[List[LunRange]] = Field(
        None,
        description='LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.',
    )
    machineIds: Optional[List[str]] = Field(
        None,
        description='Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The name of the volume config.'
    )
    nfsExports: Optional[List[NfsExport]] = Field(
        None, description='NFS exports. Set only when protocol is PROTOCOL_NFS.'
    )
    performanceTier: Optional[PerformanceTier] = Field(
        None, description='Performance tier of the Volume. Default is SHARED.'
    )
    protocol: Optional[Protocol1] = Field(None, description='Volume protocol.')
    sizeGb: Optional[int] = Field(
        None, description='The requested size of this volume, in GB.'
    )
    snapshotsEnabled: Optional[bool] = Field(
        None, description='Whether snapshots should be enabled.'
    )
    storageAggregatePool: Optional[str] = Field(
        None,
        description='Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.',
    )
    type: Optional[Type3] = Field(None, description='The type of this Volume.')
    userNote: Optional[str] = Field(
        None,
        description='User note field, it can be used by customers to add additional information for the BMS Ops team .',
    )


class Type4(Enum):
    SNAPSHOT_TYPE_UNSPECIFIED = 'SNAPSHOT_TYPE_UNSPECIFIED'
    AD_HOC = 'AD_HOC'
    SCHEDULED = 'SCHEDULED'


class VolumeSnapshot(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The creation time of the snapshot.'
    )
    description: Optional[str] = Field(
        None, description='The description of the snapshot.'
    )
    id: Optional[str] = Field(
        None,
        description='Output only. An identifier for the snapshot, generated by the backend.',
    )
    name: Optional[str] = Field(None, description='The name of the snapshot.')
    storageVolume: Optional[str] = Field(
        None,
        description='Output only. The name of the volume which this snapshot belongs to.',
    )
    type: Optional[Type4] = Field(
        None,
        description='Output only. The type of the snapshot which indicates whether it was scheduled or manual/ad-hoc.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GoogleCloudBaremetalsolutionV2LogicalInterface(BaseModel):
    interfaceIndex: Optional[int] = Field(
        None,
        description='The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.',
    )
    logicalNetworkInterfaces: Optional[List[LogicalNetworkInterface]] = Field(
        None,
        description='List of logical network interfaces within a logical interface.',
    )
    name: Optional[str] = Field(
        None,
        description='Interface name. This is of syntax or and forms part of the network template name.',
    )


class InstanceConfig(BaseModel):
    accountNetworksEnabled: Optional[bool] = Field(
        None,
        description='If true networks can be from different projects of the same vendor account.',
    )
    clientNetwork: Optional[NetworkAddress] = Field(
        None,
        description='Client network address. Filled if InstanceConfig.multivlan_config is false.',
    )
    hyperthreading: Optional[bool] = Field(
        None,
        description='Whether the instance should be provisioned with Hyperthreading enabled.',
    )
    id: Optional[str] = Field(
        None,
        description='A transient unique identifier to idenfity an instance within an ProvisioningConfig request.',
    )
    instanceType: Optional[str] = Field(
        None,
        description='Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)',
    )
    logicalInterfaces: Optional[
        List[GoogleCloudBaremetalsolutionV2LogicalInterface]
    ] = Field(
        None,
        description='List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The name of the instance config.'
    )
    networkConfig: Optional[NetworkConfig] = Field(
        None, description='The type of network configuration on the instance.'
    )
    networkTemplate: Optional[str] = Field(
        None,
        description='Server network template name. Filled if InstanceConfig.multivlan_config is true.',
    )
    osImage: Optional[str] = Field(
        None,
        description='OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)',
    )
    privateNetwork: Optional[NetworkAddress] = Field(
        None,
        description='Private network address, if any. Filled if InstanceConfig.multivlan_config is false.',
    )
    userNote: Optional[str] = Field(
        None,
        description='User note field, it can be used by customers to add additional information for the BMS Ops team .',
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ListLunsResponse(BaseModel):
    luns: Optional[List[Lun]] = Field(None, description='The list of luns.')
    nextPageToken: Optional[str] = Field(
        None, description='A token identifying a page of results from the server.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListNfsSharesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token identifying a page of results from the server.'
    )
    nfsShares: Optional[List[NfsShare]] = Field(
        None, description='The list of NFS shares.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListProvisioningQuotasResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    provisioningQuotas: Optional[List[ProvisioningQuota]] = Field(
        None, description='The provisioning quotas registered in this project.'
    )


class ListSSHKeysResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    sshKeys: Optional[List[SSHKey]] = Field(
        None, description='The SSH keys registered in the project.'
    )


class ListVolumeSnapshotsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token identifying a page of results from the server.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )
    volumeSnapshots: Optional[List[VolumeSnapshot]] = Field(
        None, description='The list of snapshots.'
    )


class ListVolumesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token identifying a page of results from the server.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )
    volumes: Optional[List[Volume]] = Field(
        None, description='The list of storage volumes.'
    )


class OSImage(BaseModel):
    applicableInstanceTypes: Optional[List[str]] = Field(
        None,
        description='Instance types this image is applicable to. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)',
    )
    code: Optional[str] = Field(None, description='OS Image code.')
    description: Optional[str] = Field(None, description='OS Image description.')
    name: Optional[str] = Field(
        None, description="Output only. OS Image's unique name."
    )
    supportedNetworkTemplates: Optional[List[ServerNetworkTemplate]] = Field(
        None, description='Network templates that can be used with this OS Image.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class ProvisioningConfig(BaseModel):
    cloudConsoleUri: Optional[str] = Field(
        None,
        description='Output only. URI to Cloud Console UI view of this provisioning config.',
    )
    customId: Optional[str] = Field(
        None,
        description='Optional. The user-defined identifier of the provisioning config.',
    )
    email: Optional[str] = Field(
        None,
        description='Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.',
    )
    handoverServiceAccount: Optional[str] = Field(
        None,
        description='A service account to enable customers to access instance credentials upon handover.',
    )
    instances: Optional[List[InstanceConfig]] = Field(
        None, description='Instances to be created.'
    )
    location: Optional[str] = Field(
        None,
        description='Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The system-generated name of the provisioning config. This follows the UUID format.',
    )
    networks: Optional[List[NetworkConfig1]] = Field(
        None, description='Networks to be created.'
    )
    state: Optional[State4] = Field(
        None, description='Output only. State of ProvisioningConfig.'
    )
    statusMessage: Optional[str] = Field(
        None, description='Optional status messages associated with the FAILED state.'
    )
    ticketId: Optional[str] = Field(
        None, description='A generated ticket id to track provisioning request.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Last update timestamp.'
    )
    volumes: Optional[List[VolumeConfig]] = Field(
        None, description='Volumes to be created.'
    )
    vpcScEnabled: Optional[bool] = Field(
        None, description='If true, VPC SC is enabled for the cluster.'
    )


class SubmitProvisioningConfigRequest(BaseModel):
    email: Optional[str] = Field(
        None,
        description='Optional. Email provided to send a confirmation with provisioning config to.',
    )
    provisioningConfig: Optional[ProvisioningConfig] = Field(
        None, description='Required. The ProvisioningConfig to create.'
    )


class SubmitProvisioningConfigResponse(BaseModel):
    provisioningConfig: Optional[ProvisioningConfig] = Field(
        None, description='The submitted provisioning config.'
    )


class VRF(BaseModel):
    name: Optional[str] = Field(None, description='The name of the VRF.')
    qosPolicy: Optional[QosPolicy] = Field(
        None,
        description='The QOS policy applied to this VRF. The value is only meaningful when all the vlan attachments have the same QoS. This field should not be used for new integrations, use vlan attachment level qos instead. The field is left for backward-compatibility.',
    )
    state: Optional[State5] = Field(None, description='The possible state of VRF.')
    vlanAttachments: Optional[List[VlanAttachment]] = Field(
        None, description='The list of VLAN attachments for the VRF.'
    )


class FetchInstanceProvisioningSettingsResponse(BaseModel):
    images: Optional[List[OSImage]] = Field(
        None, description='The OS images available.'
    )


class Network(BaseModel):
    cidr: Optional[str] = Field(None, description='The cidr of the Network.')
    gatewayIp: Optional[str] = Field(
        None, description='Output only. Gateway ip address.'
    )
    id: Optional[str] = Field(
        None, description='An identifier for the `Network`, generated by the backend.'
    )
    ipAddress: Optional[str] = Field(None, description='IP address configured.')
    jumboFramesEnabled: Optional[bool] = Field(
        None, description='Whether network uses standard frames or jumbo ones.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Labels as key value pairs.'
    )
    macAddress: Optional[List[str]] = Field(
        None, description='List of physical interfaces.'
    )
    mountPoints: Optional[List[NetworkMountPoint]] = Field(
        None, description='Input only. List of mount points to attach the network to.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`',
    )
    pod: Optional[str] = Field(None, description='Output only. Pod name.')
    reservations: Optional[List[NetworkAddressReservation]] = Field(
        None,
        description='List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.',
    )
    servicesCidr: Optional[str] = Field(
        None, description='IP range for reserved for services (e.g. NFS).'
    )
    state: Optional[State2] = Field(None, description='The Network state.')
    type: Optional[Type1] = Field(None, description='The type of this network.')
    vlanId: Optional[str] = Field(None, description='The vlan id of the Network.')
    vrf: Optional[VRF] = Field(None, description='The vrf for the Network.')


class NetworkUsage(BaseModel):
    network: Optional[Network] = Field(None, description='Network.')
    usedIps: Optional[List[str]] = Field(
        None, description='All used IP addresses in this network.'
    )


class Instance(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Create a time stamp.'
    )
    firmwareVersion: Optional[str] = Field(
        None, description='Output only. The firmware version for the instance.'
    )
    hyperthreadingEnabled: Optional[bool] = Field(
        None,
        description='True if you enable hyperthreading for the server, otherwise false. The default value is false.',
    )
    id: Optional[str] = Field(
        None,
        description='Output only. An identifier for the `Instance`, generated by the backend.',
    )
    interactiveSerialConsoleEnabled: Optional[bool] = Field(
        None,
        description='Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Labels as key value pairs.'
    )
    logicalInterfaces: Optional[
        List[GoogleCloudBaremetalsolutionV2LogicalInterface]
    ] = Field(
        None,
        description='List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.',
    )
    loginInfo: Optional[str] = Field(
        None, description='Output only. Text field about info for logging in.'
    )
    luns: Optional[List[Lun]] = Field(
        None, description='Immutable. List of LUNs associated with this server.'
    )
    machineType: Optional[str] = Field(
        None,
        description='Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`',
    )
    networkTemplate: Optional[str] = Field(
        None,
        description='Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".',
    )
    networks: Optional[List[Network]] = Field(
        None, description='Output only. List of networks associated with this server.'
    )
    osImage: Optional[str] = Field(
        None, description='The OS image currently installed on the server.'
    )
    pod: Optional[str] = Field(
        None,
        description='Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.',
    )
    state: Optional[State] = Field(
        None, description='Output only. The state of the server.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Update a time stamp.'
    )
    volumes: Optional[List[Volume]] = Field(
        None,
        description="Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.",
    )
    workloadProfile: Optional[WorkloadProfile] = Field(
        None, description='The workload profile for the instance.'
    )


class ListInstancesResponse(BaseModel):
    instances: Optional[List[Instance]] = Field(
        None, description='The list of servers.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='A token identifying a page of results from the server.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListNetworkUsageResponse(BaseModel):
    networks: Optional[List[NetworkUsage]] = Field(
        None, description='Networks with IPs.'
    )


class ListNetworksResponse(BaseModel):
    networks: Optional[List[Network]] = Field(None, description='The list of networks.')
    nextPageToken: Optional[str] = Field(
        None, description='A token identifying a page of results from the server.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )
